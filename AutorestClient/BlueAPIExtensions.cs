// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Api.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlueAPI.
    /// </summary>
    public static partial class BlueAPIExtensions
    {
            /// <summary>
            /// Authenticate user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static AuthResponseModel Auth(this IBlueAPI operations, AuthRequestModel request = default(AuthRequestModel))
            {
                return operations.AuthAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Authenticate user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthResponseModel> AuthAsync(this IBlueAPI operations, AuthRequestModel request = default(AuthRequestModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AuthWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return the amount of registered Lykke.blue users by partner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GeUsersCountRegistered(this IBlueAPI operations)
            {
                return operations.GeUsersCountRegisteredAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the amount of registered Lykke.blue users by partner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GeUsersCountRegisteredAsync(this IBlueAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeUsersCountRegisteredWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IBlueAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IBlueAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetPledgeResponse GetPledge(this IBlueAPI operations)
            {
                return operations.GetPledgeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPledgeResponse> GetPledgeAsync(this IBlueAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPledgeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update pledge details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Pledge values we wanna change.
            /// </param>
            public static void UpdatePledge(this IBlueAPI operations, UpdatePledgeRequest request = default(UpdatePledgeRequest))
            {
                operations.UpdatePledgeAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update pledge details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Pledge values we wanna change.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePledgeAsync(this IBlueAPI operations, UpdatePledgeRequest request = default(UpdatePledgeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePledgeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a new pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Pledge value.
            /// </param>
            public static void CreatePledge(this IBlueAPI operations, CreatePledgeRequest request = default(CreatePledgeRequest))
            {
                operations.CreatePledgeAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Pledge value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreatePledgeAsync(this IBlueAPI operations, CreatePledgeRequest request = default(CreatePledgeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreatePledgeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeletePledge(this IBlueAPI operations)
            {
                operations.DeletePledgeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete pledge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePledgeAsync(this IBlueAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePledgeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string GetReferralLinkById(this IBlueAPI operations, string id)
            {
                return operations.GetReferralLinkByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetReferralLinkByIdAsync(this IBlueAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferralLinkByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// </param>
            public static object GetReferralLinkByUrl(this IBlueAPI operations, string url)
            {
                return operations.GetReferralLinkByUrlAsync(url).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetReferralLinkByUrlAsync(this IBlueAPI operations, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferralLinkByUrlWithHttpMessagesAsync(url, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string RequestInvitationReferralLink(this IBlueAPI operations)
            {
                return operations.RequestInvitationReferralLinkAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RequestInvitationReferralLinkAsync(this IBlueAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestInvitationReferralLinkWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='refLinkId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static string ClaimInvitationLink(this IBlueAPI operations, string refLinkId, ClaimRefLinkModel request = default(ClaimRefLinkModel))
            {
                return operations.ClaimInvitationLinkAsync(refLinkId, request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='refLinkId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ClaimInvitationLinkAsync(this IBlueAPI operations, string refLinkId, ClaimRefLinkModel request = default(ClaimRefLinkModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClaimInvitationLinkWithHttpMessagesAsync(refLinkId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GetReferralLinksStatisticsBySenderIdResponse GetReferralLinksStatisticsBySenderId(this IBlueAPI operations)
            {
                return operations.GetReferralLinksStatisticsBySenderIdAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetReferralLinksStatisticsBySenderIdResponse> GetReferralLinksStatisticsBySenderIdAsync(this IBlueAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferralLinksStatisticsBySenderIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get tweets cash data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Tweets request model by which we search for tweets
            /// </param>
            public static IList<object> GetTweetsJSON(this IBlueAPI operations, TweetsRequestModel model = default(TweetsRequestModel))
            {
                return operations.GetTweetsJSONAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tweets cash data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Tweets request model by which we search for tweets
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<object>> GetTweetsJSONAsync(this IBlueAPI operations, TweetsRequestModel model = default(TweetsRequestModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTweetsJSONWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
